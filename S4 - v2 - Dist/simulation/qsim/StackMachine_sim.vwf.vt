// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2022 17:27:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          StackMachine_sim
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module StackMachine_sim_vlg_vec_tst();
// constants                                           
// general purpose registers
reg MCLK;
reg RESET;
// wires                                               
wire [15:0] A;
wire [15:0] AC;
wire [2:0] ALU_OP;
wire ARD;
wire AWR;
wire CLR_A;
wire CNT_PC;
wire DEC_A;
wire DEC_XR;
wire [15:0] DI;
wire [15:0] DO;
wire INC_A;
wire INC_XR;
wire [15:0] IR;
wire LD_A;
wire LD_FP;
wire LD_IR;
wire LD_MAR;
wire LD_MDR;
wire LD_PC;
wire LD_SP;
wire LD_XR;
wire OE_AA;
wire OE_AD;
wire OE_FP;
wire OE_IRL;
wire OE_MAR;
wire OE_MDR;
wire OE_MR;
wire OE_PC;
wire OE_RAM;
wire OE_ROM;
wire OE_SP;
wire OE_XR;
wire [15:0] PC;
wire PD_SP;
wire PL_SP;
wire RD;
wire [15:0] RES;
wire SCLK;
wire WE_MR;
wire WE_RAM;
wire WR;

// assign statements (if any)                          
StackMachine_sim i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AC(AC),
	.ALU_OP(ALU_OP),
	.ARD(ARD),
	.AWR(AWR),
	.CLR_A(CLR_A),
	.CNT_PC(CNT_PC),
	.DEC_A(DEC_A),
	.DEC_XR(DEC_XR),
	.DI(DI),
	.\DO (DO),
	.INC_A(INC_A),
	.INC_XR(INC_XR),
	.IR(IR),
	.LD_A(LD_A),
	.LD_FP(LD_FP),
	.LD_IR(LD_IR),
	.LD_MAR(LD_MAR),
	.LD_MDR(LD_MDR),
	.LD_PC(LD_PC),
	.LD_SP(LD_SP),
	.LD_XR(LD_XR),
	.MCLK(MCLK),
	.OE_AA(OE_AA),
	.OE_AD(OE_AD),
	.OE_FP(OE_FP),
	.OE_IRL(OE_IRL),
	.OE_MAR(OE_MAR),
	.OE_MDR(OE_MDR),
	.OE_MR(OE_MR),
	.OE_PC(OE_PC),
	.OE_RAM(OE_RAM),
	.OE_ROM(OE_ROM),
	.OE_SP(OE_SP),
	.OE_XR(OE_XR),
	.PC(PC),
	.PD_SP(PD_SP),
	.PL_SP(PL_SP),
	.RD(RD),
	.RES(RES),
	.RESET(RESET),
	.SCLK(SCLK),
	.WE_MR(WE_MR),
	.WE_RAM(WE_RAM),
	.WR(WR)
);
initial 
begin 
#100000000 $finish;
end 

// RESET
initial
begin
	RESET = 1'b1;
	RESET = #640000 1'b0;
end 

// MCLK
always
begin
	MCLK = 1'b0;
	MCLK = #500000 1'b1;
	#500000;
end 
endmodule

